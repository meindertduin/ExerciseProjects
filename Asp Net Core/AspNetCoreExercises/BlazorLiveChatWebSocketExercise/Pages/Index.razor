@page "/"
@implements IDisposable
@using BlazorLiveChatWebSocketExercise.Infrastructure
@using System.Globalization
@using System.Net.WebSockets
@using BlazorLiveChatWebSocketExercise.Middleware
@inject IWebSocketClient webSocketClient


<div class="livechat">
    <h1 class="livechat-header">
        Livechat
    </h1>
    <div class="livechat-message-container">
        @foreach (var message in _messages)
        {
            <div class="message-container">
                <div class="message-header">
                    @message.UserName
                </div>
                <div class="message-content">
                    <div class="message-time">
                        @message.TimeSend.ToString("t", CultureInfo.CurrentCulture)
                    </div>
                    <div class="message">
                        @message.Message
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="livechat-input-container">
        @if (webSocketState == WebSocketState.Open)
        {
            <textarea @bind="messageValue" placeholder="type here your message..."></textarea>
            <button @onclick="SendMessage">Send message</button>
        }
        else
        {
            <input placeholder="state your username" @bind="username">
            <button @onclick="ConnectToChat">Join with username</button>
        }
    </div>
</div>




@code{
    private string username = "";
    private string messageValue = "";
    private string chatUrl = "wss://localhost:5001/ws";
    private WebSocketState webSocketState = WebSocketState.Closed;
    
    private List<WebSocketMessageModel> _messages = new List<WebSocketMessageModel>();

    protected override void OnInitialized()
    {
        webSocketClient.OnMessageReceived += HandleMessage;
        webSocketClient.OnWebSocketStateChanged += HandleStateUpdate;
    }

    private void HandleMessage(object sender, WebSocketMessageModel e)
    {
        _messages.Add(e);
        StateHasChanged();
    }
    
    private void HandleStateUpdate(object sender, WebSocketState e)
    {
        webSocketState = e;
        StateHasChanged();
    }
    
    private async Task ConnectToChat()
    {
        await webSocketClient.StartConnection(chatUrl, username);
    }

    private void SendMessage()
    {
        if (string.IsNullOrEmpty(messageValue) == false)
        {
            var message = new WebSocketMessageModel
            {
                MessageType = MessageType.BroadCastMessage,
                Message = messageValue,
                UserName = username,
                TimeSend = DateTime.Now,
            };
            
            webSocketClient.SendMessage(message);
        }
    }
    
    public void Dispose()
    {
        webSocketClient.DisposeAsync();
    }
}


<style>
    .livechat{
        width: 350px;
        padding: 20px;
        border-radius: 20px;
        background-color: yellowgreen;
        position: absolute;
        right: 60%;
        top: 60%;
    }
    
    .livechat-header{
        font-weight: bold;
        text-align: center;
    }

    .livechat-message-container{
        background-color: white;
        display: flex;
        flex-direction: column;
        height: 400px;
        overflow-y: scroll;
    }
    
    .message-container{
        background-color: darkseagreen;
        border-radius: 20px;
        padding: 5px;
        margin: 4px 2px 4px 2px;
    }
    
    .message-header{
        justify-self: center;  
    }
    
    .message-content{
        width: 300px;
        display: flex;
        flex-direction: row;
        margin: 5px;
    }
    .message-time{
        margin-right: 1em;
    }
    .message{
        
    }
    
    .livechat-input-container{
        padding: 5px;
        display: flex;
        flex-direction: column;
        height: 100px;
    }
    .livechat-input-container > textarea button{
        width: 100%;
    }
    
    
</style>